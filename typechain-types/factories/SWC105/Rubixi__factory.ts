/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Rubixi, RubixiInterface } from "../../SWC105/Rubixi";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "currentPyramidBalanceApproximately",
    outputs: [
      {
        name: "pyramidBalance",
        type: "uint256",
      },
      {
        name: "info",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "feesSeperateFromBalanceApproximately",
    outputs: [
      {
        name: "fees",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_pcent",
        type: "uint256",
      },
    ],
    name: "collectPercentOfFees",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "nextPayoutWhenPyramidBalanceTotalsApproximately",
    outputs: [
      {
        name: "balancePayout",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "DynamicPyramid",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "collectAllFees",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentMultiplier",
    outputs: [
      {
        name: "multiplier",
        type: "uint256",
      },
      {
        name: "info",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "currentFeePercentage",
    outputs: [
      {
        name: "fee",
        type: "uint256",
      },
      {
        name: "info",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "orderInPyramid",
        type: "uint256",
      },
    ],
    name: "participantDetails",
    outputs: [
      {
        name: "Address",
        type: "address",
      },
      {
        name: "Payout",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "totalParticipants",
    outputs: [
      {
        name: "count",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_owner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_amt",
        type: "uint256",
      },
    ],
    name: "collectFeesInEther",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_mult",
        type: "uint256",
      },
    ],
    name: "changeMultiplier",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "numberOfParticipantsWaitingForPayout",
    outputs: [
      {
        name: "count",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "changeFeePercentage",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    payable: false,
    stateMutability: "nonpayable",
    type: "fallback",
  },
];

const _bytecode =
  "0x6080604052600080556000600155600a60025561012c600355600060045534801561002957600080fd5b50611095806100396000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309dfdc71146100f2578063253459e3146101895780634229616d146101b457806357d4021b146101e157806367f809e91461020c578063686f2c90146102235780636fbaaa1e1461023a5780638a5fb3ca146102d15780639dbc4f9b14610368578063a26dbf26146103dc578063a6f9dae114610407578063b40229501461044a578063ced9267014610477578063d11f13df146104a4578063fae14192146104cf575b3480156100e757600080fd5b506100f06104fc565b005b3480156100fe57600080fd5b50610107610557565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561014d578082015181840152602081019050610132565b50505050905090810190601f16801561017a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561019557600080fd5b5061019e610594565b6040518082815260200191505060405180910390f35b3480156101c057600080fd5b506101df600480360381019080803590602001909291905050506105b1565b005b3480156101ed57600080fd5b506101f66106b8565b6040518082815260200191505060405180910390f35b34801561021857600080fd5b506102216106f5565b005b34801561022f57600080fd5b50610238610738565b005b34801561024657600080fd5b5061024f610816565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561029557808201518184015260208101905061027a565b50505050905090810190601f1680156102c25780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156102dd57600080fd5b506102e6610842565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561032c578082015181840152602081019050610311565b50505050905090810190601f1680156103595780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561037457600080fd5b506103936004803603810190808035906020019092919050505061086b565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b3480156103e857600080fd5b506103f16108fb565b6040518082815260200191505060405180910390f35b34801561041357600080fd5b50610448600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610908565b005b34801561045657600080fd5b50610475600480360381019080803590602001909291905050506109a3565b005b34801561048357600080fd5b506104a260048036038101908080359060200190929190505050610aa8565b005b3480156104b057600080fd5b506104b9610b26565b6040518082815260200191505060405180910390f35b3480156104db57600080fd5b506104fa60048036038101908080359060200190929190505050610b37565b005b6000670de0b6b3a76400003410156105235734600160008282540192505081905550610554565b60025490506802b5e3af16b18800003410151561054a5760028181151561054657fe5b0490505b61055381610ba7565b5b50565b60006060670de0b6b3a764000060005481151561057057fe5b0491506101006040519081016040528060ca8152602001610e8160ca913990509091565b6000670de0b6b3a76400006001548115156105ab57fe5b04905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106b457600060015414158061061c575060648211155b151561062757600080fd5b81606460015481151561063657fe5b04029050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106a2573d6000803e3d6000fd5b50806001600082825403925050819055505b5050565b6000670de0b6b3a764000060066004548154811015156106d457fe5b9060005260206000209060020201600101548115156106ef57fe5b04905090565b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610814576000600154141515156107a057600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6001549081150290604051600060405180830381858888f1935050505015801561080a573d6000803e3d6000fd5b5060006001819055505b565b6000606060035491506101406040519081016040528061011f8152602001610f4b61011f913990509091565b60006060600254915060c06040519081016040528060848152602001610dfd6084913990509091565b600080600680549050831115156108f65760068381548110151561088b57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150670de0b6b3a76400006006848154811015156108d757fe5b9060005260206000209060020201600101548115156108f257fe5b0490505b915091565b6000600680549050905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156109a05780600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610aa557670de0b6b3a764000081029050600154811115610a1957610a18610738565b5b600060015414151515610a2b57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a93573d6000803e3d6000fd5b50806001600082825403925050819055505b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610b235761012c81111580610b10575060788110155b1515610b1b57600080fd5b806003819055505b50565b600060045460068054905003905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610ba457600a81111515610b9c57600080fd5b806002819055505b50565b6000600660408051908101604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160646003543402811515610be257fe5b048152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050600a6006805490501415610c805760c8600381905550610c98565b60196006805490501415610c975760966003819055505b5b6064826064033402811515610ca957fe5b0460008082825401925050819055506064823402811515610cc657fe5b046001600082825401925050819055505b6006600454815481101515610ce857fe5b9060005260206000209060020201600101546000541115610df8576006600454815481101515610d1457fe5b90600052602060002090600202016001015490506006600454815481101515610d3957fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610db0573d6000803e3d6000fd5b506006600454815481101515610dc257fe5b90600052602060002090600202016001015460008082825403925050819055506001600460008282540192505081905550610cd7565b5050560053686f776e20696e202520666f726d2e204665652069732068616c766564283530252920666f7220616d6f756e747320657175616c206f722067726561746572207468616e203530206574686572732e2028466565206d6179206368616e67652c206275742069732063617070656420746f2061206d6178696d756d206f662031302529416c6c2062616c616e63652076616c75657320617265206d6561737572656420696e204574686572732c206e6f746520746861742064756520746f206e6f20646563696d616c20706c6163696e672c2074686573652076616c7565732073686f7720757020617320696e746567657273206f6e6c792c2077697468696e2074686520636f6e747261637420697473656c6620796f752077696c6c206765742074686520657861637420646563696d616c2076616c756520796f752061726520737570706f73656420746f54686973206d756c7469706c696572206170706c69657320746f20796f7520617320736f6f6e206173207472616e73616374696f6e2069732072656365697665642c206d6179206265206c6f776572656420746f2068617374656e207061796f757473206f7220696e63726561736564206966207061796f75747320617265206661737420656e6f7567682e2044756520746f206e6f20666c6f6174206f7220646563696d616c732c206d756c7469706c696572206973207831303020666f722061206672616374696f6e616c206d756c7469706c69657220652e672e203235302069732061637475616c6c79206120322e3578206d756c7469706c6965722e20436170706564206174203378206d617820616e6420312e3278206d696e2ea165627a7a72305820b20397822cc44c03dd14950fb2434c0c3bef82e7cc350f79b39c8d2b132a65bb0029";

type RubixiConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RubixiConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rubixi__factory extends ContractFactory {
  constructor(...args: RubixiConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Rubixi> {
    return super.deploy(overrides || {}) as Promise<Rubixi>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Rubixi {
    return super.attach(address) as Rubixi;
  }
  override connect(signer: Signer): Rubixi__factory {
    return super.connect(signer) as Rubixi__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RubixiInterface {
    return new utils.Interface(_abi) as RubixiInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rubixi {
    return new Contract(address, _abi, signerOrProvider) as Rubixi;
  }
}
